{"version":3,"file":"DndContext.js","sourceRoot":"","sources":["../src/DndContext.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,UAAU,EAAkB,MAAM,OAAO,CAAC;AAkClE,yCAAyC;AACzC,MAAM,CAAC,MAAM,UAAU,GAAG,aAAa,CAAkB,IAAI,CAAC,CAAC;AAE/D,MAAM,CAAC,MAAM,aAAa,GAAG,GAAG,EAAE;IAChC,OAAO,UAAU,CAAC,UAAU,CAAC,CAAC;AAChC,CAAC,CAAC","sourcesContent":["import { createContext, useContext, type RefObject } from \"react\";\nimport type { LayoutRectangle, View } from \"react-native\";\nimport type { GestureEventPayload } from \"react-native-gesture-handler\";\nimport type { SharedValue } from \"react-native-reanimated\";\nimport type { DraggableConstraints, SharedPoint } from \"./hooks\";\nimport type { SharedData, UniqueIdentifier } from \"./types\";\n\nexport type ItemOptions = { id: UniqueIdentifier; data: SharedData; disabled: boolean };\nexport type DraggableItemOptions = ItemOptions & DraggableConstraints;\nexport type DraggableOptions = Record<UniqueIdentifier, DraggableItemOptions>;\nexport type DroppableOptions = Record<UniqueIdentifier, ItemOptions>;\nexport type Layouts = Record<UniqueIdentifier, SharedValue<LayoutRectangle>>;\nexport type Offsets = Record<UniqueIdentifier, SharedPoint>;\nexport type DraggableState = \"resting\" | \"pending\" | \"dragging\" | \"dropping\" | \"acting\";\nexport type DraggableStates = Record<UniqueIdentifier, SharedValue<DraggableState>>;\n\nexport type DndContextValue = {\n  containerRef: RefObject<View>;\n  draggableLayouts: SharedValue<Layouts>;\n  droppableLayouts: SharedValue<Layouts>;\n  draggableOptions: SharedValue<DraggableOptions>;\n  droppableOptions: SharedValue<DroppableOptions>;\n  draggableOffsets: SharedValue<Offsets>;\n  draggableRestingOffsets: SharedValue<Offsets>;\n  draggableStates: SharedValue<DraggableStates>;\n  draggablePendingId: SharedValue<UniqueIdentifier | null>;\n  draggableActiveId: SharedValue<UniqueIdentifier | null>;\n  droppableActiveId: SharedValue<UniqueIdentifier | null>;\n  draggableActiveLayout: SharedValue<LayoutRectangle | null>;\n  draggableInitialOffset: SharedPoint;\n  draggableContentOffset: SharedPoint;\n  panGestureState: SharedValue<GestureEventPayload[\"state\"]>;\n};\n\n// @ts-expect-error ignore detached state\nexport const DndContext = createContext<DndContextValue>(null);\n\nexport const useDndContext = () => {\n  return useContext(DndContext);\n};\n"]}