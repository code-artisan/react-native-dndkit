{"version":3,"file":"Draggable.js","sourceRoot":"","sources":["../../src/components/Draggable.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAyD,MAAM,OAAO,CAAC;AAE9E,OAAO,QAAQ,EAAE,EAAE,gBAAgB,EAAE,UAAU,EAAsB,MAAM,yBAAyB,CAAC;AACrG,OAAO,EAAE,YAAY,EAAuD,MAAM,UAAU,CAAC;AAU7F;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,CAAC,MAAM,SAAS,GAAyD,CAAC,EAC9E,QAAQ,EACR,EAAE,EACF,IAAI,EACJ,QAAQ,EACR,KAAK,EACL,aAAa,GAAG,GAAG,EACnB,eAAe,EACf,mBAAmB,EACnB,oBAAoB,EACpB,GAAG,UAAU,EACd,EAAE,EAAE;IACH,MAAM,EAAE,UAAU,EAAE,aAAa,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,YAAY,CAAC;QAChE,EAAE;QACF,IAAI;QACJ,QAAQ;QACR,eAAe;QACf,mBAAmB;KACpB,CAAC,CAAC;IAEH,MAAM,aAAa,GAAG,gBAAgB,CAAC,GAAG,EAAE;QAC1C,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,KAAK,UAAU,CAAC;QAC5C,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,KAAK,QAAQ,CAAC;QAC1C,MAAM,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAEnD,MAAM,KAAK,GAAG;YACZ,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM;YACN,SAAS,EAAE;gBACT;oBACE,8BAA8B;oBAC9B,UAAU,EAAE,QAAQ;wBAClB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK;wBAChB,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;iBAClE;gBACD;oBACE,8BAA8B;oBAC9B,UAAU,EAAE,QAAQ;wBAClB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK;wBAChB,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;iBAClE;aACF;SACF,CAAC;QACF,IAAI,oBAAoB,EAAE,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,oBAAoB,CAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACpG,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC;IAE/B,OAAO,CACL,oBAAC,QAAQ,CAAC,IAAI,IAAC,GAAG,EAAE,UAAU,EAAE,QAAQ,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,KAAK,EAAE,aAAa,CAAC,KAAM,UAAU,IACnG,QAAQ,CACK,CACjB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import React, { type FunctionComponent, type PropsWithChildren } from \"react\";\nimport { type ViewProps } from \"react-native\";\nimport Animated, { useAnimatedStyle, withSpring, type AnimatedProps } from \"react-native-reanimated\";\nimport { useDraggable, type DraggableConstraints, type UseDroppableOptions } from \"../hooks\";\nimport type { AnimatedStyleWorklet } from \"../types\";\n\nexport type DraggableProps = AnimatedProps<ViewProps> &\n  UseDroppableOptions &\n  Partial<DraggableConstraints> & {\n    animatedStyleWorklet?: AnimatedStyleWorklet;\n    activeOpacity?: number;\n  };\n\n/**\n * Draggable is a React functional component that can be used to create elements that can be dragged within a Drag and Drop context.\n *\n * @component\n * @example\n * <Draggable id=\"draggable-1\" data={{ label: \"Example\" }}>\n *   <Text>Drag me!</Text>\n * </Draggable>\n *\n * @param {object} props - The properties that define the Draggable component.\n * @param {string} props.id - A unique identifier for the Draggable component.\n * @param {object} props.data - An object that contains data associated with the Draggable component.\n * @param {boolean} props.disabled - A flag that indicates whether the Draggable component is disabled.\n * @param {number} props.activationDelay - A number representing the duration, in milliseconds, that this draggable item needs to be held for before allowing a drag to start.\n * @param {number} props.activationTolerance - A number representing the distance, in pixels, of motion that is tolerated before the drag operation is aborted.\n * @param {object} props.style - An object that defines the style of the Draggable component.\n * @param {number} props.activeOpacity - A number that defines the opacity of the Draggable component when it is active.\n * @param {Function} props.animatedStyleWorklet - A worklet function that modifies the animated style of the Draggable component.\n * @returns {React.Component} Returns a Draggable component that can be moved by the user within a Drag and Drop context.\n */\nexport const Draggable: FunctionComponent<PropsWithChildren<DraggableProps>> = ({\n  children,\n  id,\n  data,\n  disabled,\n  style,\n  activeOpacity = 0.9,\n  activationDelay,\n  activationTolerance,\n  animatedStyleWorklet,\n  ...otherProps\n}) => {\n  const { setNodeRef, setNodeLayout, offset, state } = useDraggable({\n    id,\n    data,\n    disabled,\n    activationDelay,\n    activationTolerance,\n  });\n\n  const animatedStyle = useAnimatedStyle(() => {\n    const isActive = state.value === \"dragging\";\n    const isActing = state.value === \"acting\";\n    const zIndex = isActive ? 999 : isActing ? 998 : 1;\n\n    const style = {\n      opacity: isActive ? activeOpacity : 1,\n      zIndex,\n      transform: [\n        {\n          // translateX: offset.x.value,\n          translateX: isActive\n            ? offset.x.value\n            : withSpring(offset.x.value, { damping: 100, stiffness: 1000 }),\n        },\n        {\n          // translateY: offset.y.value,\n          translateY: isActive\n            ? offset.y.value\n            : withSpring(offset.y.value, { damping: 100, stiffness: 1000 }),\n        },\n      ],\n    };\n    if (animatedStyleWorklet) {\n      Object.assign(style, animatedStyleWorklet(style, { isActive, isActing, isDisabled: !!disabled }));\n    }\n    return style;\n  }, [id, state, activeOpacity]);\n\n  return (\n    <Animated.View ref={setNodeRef} onLayout={setNodeLayout} style={[style, animatedStyle]} {...otherProps}>\n      {children}\n    </Animated.View>\n  );\n};\n"]}