{"version":3,"file":"Droppable.js","sourceRoot":"","sources":["../../src/components/Droppable.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAyD,MAAM,OAAO,CAAC;AAE9E,OAAO,QAAQ,EAAE,EAAE,gBAAgB,EAAsB,MAAM,yBAAyB,CAAC;AACzF,OAAO,EAAE,YAAY,EAA4B,MAAM,UAAU,CAAC;AASlE;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,CAAC,MAAM,SAAS,GAAyD,CAAC,EAC9E,QAAQ,EACR,EAAE,EACF,QAAQ,EACR,IAAI,EACJ,KAAK,EACL,aAAa,GAAG,GAAG,EACnB,oBAAoB,EACpB,GAAG,UAAU,EACd,EAAE,EAAE;IACH,MAAM,EAAE,UAAU,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG,YAAY,CAAC;QAC3D,EAAE;QACF,QAAQ;QACR,IAAI;KACL,CAAC,CAAC;IAEH,MAAM,aAAa,GAAG,gBAAgB,CAAC,GAAG,EAAE;QAC1C,MAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,KAAK,EAAE,CAAC;QACvC,MAAM,KAAK,GAAG;YACZ,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;SACtC,CAAC;QACF,IAAI,oBAAoB,EAAE,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,oBAAoB,CAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QAC1F,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC,EAAE,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC,CAAC;IAExB,OAAO,CACL,oBAAC,QAAQ,CAAC,IAAI,IAAC,GAAG,EAAE,UAAU,EAAE,QAAQ,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,KAAK,EAAE,aAAa,CAAC,KAAM,UAAU,IACnG,QAAQ,CACK,CACjB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import React, { type FunctionComponent, type PropsWithChildren } from \"react\";\nimport { type ViewProps } from \"react-native\";\nimport Animated, { useAnimatedStyle, type AnimatedProps } from \"react-native-reanimated\";\nimport { useDroppable, type UseDraggableOptions } from \"../hooks\";\nimport type { AnimatedStyleWorklet } from \"../types\";\n\nexport type DroppableProps = AnimatedProps<ViewProps> &\n  UseDraggableOptions & {\n    animatedStyleWorklet?: AnimatedStyleWorklet;\n    activeOpacity?: number;\n  };\n\n/**\n * Droppable is a React functional component that can be used to create a drop target in a Drag and Drop context.\n *\n * @component\n * @example\n * <Droppable id=\"droppable-1\" data={{ accepts: [\"draggable-1\"] }}>\n *   <Text>Drop here!</Text>\n * </Droppable>\n *\n * @param {object} props - The properties that define the Droppable component.\n * @param {string} props.id - A unique identifier for the Droppable component.\n * @param {boolean} props.disabled - A flag that indicates whether the Droppable component is disabled.\n * @param {object} props.data - An object that contains data associated with the Droppable component.\n * @param {object} props.style - An object that defines the style of the Droppable component.\n * @param {number} props.activeOpacity - A number that defines the opacity of the Droppable component when it is active.\n * @param {Function} props.animatedStyleWorklet - A worklet function that modifies the animated style of the Droppable component.\n * @returns {React.Component} Returns a Droppable component that can serve as a drop target within a Drag and Drop context.\n */\nexport const Droppable: FunctionComponent<PropsWithChildren<DroppableProps>> = ({\n  children,\n  id,\n  disabled,\n  data,\n  style,\n  activeOpacity = 0.9,\n  animatedStyleWorklet,\n  ...otherProps\n}) => {\n  const { setNodeRef, setNodeLayout, activeId } = useDroppable({\n    id,\n    disabled,\n    data,\n  });\n\n  const animatedStyle = useAnimatedStyle(() => {\n    const isActive = activeId.value === id;\n    const style = {\n      opacity: isActive ? activeOpacity : 1,\n    };\n    if (animatedStyleWorklet) {\n      Object.assign(style, animatedStyleWorklet(style, { isActive, isDisabled: !!disabled }));\n    }\n    return style;\n  }, [id, activeOpacity]);\n\n  return (\n    <Animated.View ref={setNodeRef} onLayout={setNodeLayout} style={[style, animatedStyle]} {...otherProps}>\n      {children}\n    </Animated.View>\n  );\n};\n"]}