{"version":3,"file":"useDraggable.js","sourceRoot":"","sources":["../../src/hooks/useDraggable.ts"],"names":[],"mappings":"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","sourcesContent":["import { useLayoutEffect } from \"react\";\nimport { LayoutRectangle, ViewProps } from \"react-native\";\nimport { runOnUI, useSharedValue } from \"react-native-reanimated\";\nimport { DraggableState, useDndContext } from \"../DndContext\";\nimport { useLatestSharedValue, useNodeRef } from \"../hooks\";\nimport { Data, NativeElement, UniqueIdentifier } from \"../types\";\nimport { assert, isReanimatedSharedValue } from \"../utils\";\nimport { useSharedPoint } from \"./useSharedPoint\";\n\nexport type DraggableConstraints = {\n  activationDelay: number;\n  activationTolerance: number;\n};\n\nexport type UseDraggableOptions = Partial<DraggableConstraints> & {\n  id: UniqueIdentifier;\n  data?: Data;\n  disabled?: boolean;\n};\n\n/**\n * useDraggable is a custom hook that provides functionality for making a component draggable within a drag and drop context.\n *\n * @function\n * @example\n * const { offset, setNodeRef, activeId, setNodeLayout, draggableState } = useDraggable({ id: 'draggable-1' });\n *\n * @param {object} options - The options that define the behavior of the draggable component.\n * @param {string} options.id - A unique identifier for the draggable component.\n * @param {object} [options.data={}] - Optional data associated with the draggable component.\n * @param {boolean} [options.disabled=false] - A flag that indicates whether the draggable component is disabled.\n * @param {number} [options.activationDelay=0] - A number representing the duration, in milliseconds, that this draggable item needs to be held for before allowing a drag to start.\n * @param {number} [options.activationTolerance=Infinity] - A number representing the distance, in points, of motion that is tolerated before the drag operation is aborted.\n *\n * @returns {object} Returns an object with properties and methods related to the draggable component.\n * @property {object} offset - An object representing the current offset of the draggable component.\n * @property {Function} setNodeRef - A function that can be used to set the ref of the draggable component.\n * @property {string} activeId - The unique identifier of the currently active draggable component.\n * @property {string} actingId - The unique identifier of the currently interacti draggable component.\n * @property {Function} setNodeLayout - A function that handles the layout event of the draggable component.\n * @property {object} draggableState - An object representing the current state of the draggable component.\n */\nexport const useDraggable = ({\n  id,\n  data = {},\n  disabled = false,\n  activationDelay = 0,\n  activationTolerance = Infinity,\n}: UseDraggableOptions) => {\n  const {\n    draggableLayouts,\n    draggableOffsets,\n    draggableRestingOffsets,\n    draggableOptions,\n    draggableStates,\n    draggableActiveId,\n    draggablePendingId,\n    containerRef,\n    panGestureState,\n  } = useDndContext();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const [node, setNodeRef] = useNodeRef<NativeElement, any>();\n  // const key = useUniqueId(\"Draggable\");\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const sharedData = isReanimatedSharedValue(data) ? data : useLatestSharedValue(data);\n\n  const layout = useSharedValue<LayoutRectangle>({\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n  });\n  const offset = useSharedPoint(0, 0);\n  const restingOffset = useSharedPoint(0, 0);\n  const state = useSharedValue<DraggableState>(\"resting\");\n  // Register early to allow proper referencing in useDraggableStyle\n  draggableStates.value[id] = state;\n\n  useLayoutEffect(() => {\n    const runLayoutEffect = () => {\n      \"worklet\";\n      draggableLayouts.value[id] = layout;\n      draggableOffsets.value[id] = offset;\n      draggableRestingOffsets.value[id] = restingOffset;\n      draggableOptions.value[id] = { id, data: sharedData, disabled, activationDelay, activationTolerance };\n      draggableStates.value[id] = state;\n    };\n    runOnUI(runLayoutEffect)();\n    return () => {\n      const cleanupLayoutEffect = () => {\n        \"worklet\";\n        delete draggableLayouts.value[id];\n        delete draggableOffsets.value[id];\n        delete draggableRestingOffsets.value[id];\n        delete draggableOptions.value[id];\n        delete draggableStates.value[id];\n      };\n      // if(node && node.key === key)\n      runOnUI(cleanupLayoutEffect)();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]);\n\n  const onLayout: ViewProps[\"onLayout\"] = () => {\n    assert(containerRef.current);\n    node.current?.measureLayout(containerRef.current, (x, y, width, height) => {\n      layout.value = { x, y, width, height };\n    });\n  };\n\n  // const setDisabled = useCallback(\n  //   (disabled: boolean) => {\n  //     const updateDisabled = () => {\n  //       \"worklet\";\n  //       console.log(\"disabled\", disabled);\n  //       draggableOptions.value[id] = { ...draggableOptions.value[id], disabled };\n  //     };\n  //     runOnUI(updateDisabled)();\n  //   },\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  //   [id]\n  // );\n\n  return {\n    offset,\n    state,\n    setNodeRef,\n    activeId: draggableActiveId,\n    pendingId: draggablePendingId,\n    setNodeLayout: onLayout,\n    panGestureState,\n    // setDisabled,\n  };\n};\n"]}