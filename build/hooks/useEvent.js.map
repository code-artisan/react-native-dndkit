{"version":3,"file":"useEvent.js","sourceRoot":"","sources":["../../src/hooks/useEvent.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,eAAe,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAK7D;;;GAGG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAyB,OAAsB,EAAE,EAAE;IACzE,MAAM,UAAU,GAAG,MAAM,CAAgB,OAAO,CAAC,CAAC;IAElD,eAAe,CAAC,GAAG,EAAE;QACnB,UAAU,CAAC,OAAO,GAAG,OAAO,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,OAAO,WAAW,CAAC,CAAC,GAAG,IAAe,EAAE,EAAE;QACxC,OAAO,UAAU,CAAC,OAAO,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;IACvC,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC,CAAC","sourcesContent":["import { useCallback, useLayoutEffect, useRef } from \"react\";\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype EventHandler = (...args: any[]) => void;\n\n/**\n * Hook to define an event handler with a function identity that is always stable\n * {@link https://blog.logrocket.com/what-you-need-know-react-useevent-hook-rfc/}\n */\nexport const useEvent = <T extends EventHandler>(handler: T | undefined) => {\n  const handlerRef = useRef<T | undefined>(handler);\n\n  useLayoutEffect(() => {\n    handlerRef.current = handler;\n  });\n\n  return useCallback((...args: unknown[]) => {\n    return handlerRef.current?.(...args);\n  }, []);\n};\n"]}