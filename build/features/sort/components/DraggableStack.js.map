{"version":3,"file":"DraggableStack.js","sourceRoot":"","sources":["../../../../src/features/sort/components/DraggableStack.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAkD,MAAM,OAAO,CAAC;AACjG,OAAO,EAAE,IAAI,EAAkC,MAAM,cAAc,CAAC;AAEpE,OAAO,EAAE,iBAAiB,EAAiC,MAAM,4BAA4B,CAAC;AAQ9F,MAAM,CAAC,MAAM,cAAc,GAA8D,CAAC,EACxF,QAAQ,EACR,SAAS,GAAG,KAAK,EACjB,GAAG,GAAG,CAAC,EACP,aAAa,EACb,aAAa,EACb,iBAAiB,EACjB,KAAK,EAAE,SAAS,GACjB,EAAE,EAAE;IACH,MAAM,YAAY,GAAG,OAAO,CAC1B,GAAG,EAAE,CACH,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE;QAC/B,qBAAqB;QACrB,IAAI,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC;YAChC,OAAO,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;QACxB,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC,EAAE,MAAM,CAAC,OAAO,CAAuB,EAC3C,CAAC,QAAQ,CAAC,CACX,CAAC;IAEF,MAAM,KAAK,GAAG,OAAO,CACnB,GAAG,EAAE,CACH,MAAM,CAAC,MAAM,CACX;QACE,aAAa,EAAE,SAAS;QACxB,GAAG;KACJ,EACD,SAAS,CACV,EACH,CAAC,GAAG,EAAE,SAAS,EAAE,SAAS,CAAC,CAC5B,CAAC;IAEF,MAAM,UAAU,GAAG,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAExE,iBAAiB,CAAC;QAChB,GAAG,EAAE,KAAK,CAAC,GAAG;QACd,UAAU;QACV,YAAY;QACZ,aAAa;QACb,aAAa;QACb,iBAAiB;KAClB,CAAC,CAAC;IAEH,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC;AAC/C,CAAC,CAAC","sourcesContent":["import React, { Children, useMemo, type FunctionComponent, type PropsWithChildren } from \"react\";\nimport { View, type FlexStyle, type ViewProps } from \"react-native\";\nimport type { UniqueIdentifier } from \"../../../types\";\nimport { useDraggableStack, type UseDraggableStackOptions } from \"../hooks/useDraggableStack\";\n\nexport type DraggableStackProps = Pick<ViewProps, \"style\"> &\n  Pick<UseDraggableStackOptions, \"onOrderChange\" | \"onOrderUpdate\" | \"shouldSwapWorklet\"> & {\n    direction?: FlexStyle[\"flexDirection\"];\n    gap?: number;\n  };\n\nexport const DraggableStack: FunctionComponent<PropsWithChildren<DraggableStackProps>> = ({\n  children,\n  direction = \"row\",\n  gap = 0,\n  onOrderChange,\n  onOrderUpdate,\n  shouldSwapWorklet,\n  style: styleProp,\n}) => {\n  const initialOrder = useMemo(\n    () =>\n      Children.map(children, (child) => {\n        // console.log(\"in\");\n        if (React.isValidElement(child)) {\n          return child.props.id;\n        }\n        return null;\n      })?.filter(Boolean) as UniqueIdentifier[],\n    [children],\n  );\n\n  const style = useMemo(\n    () =>\n      Object.assign(\n        {\n          flexDirection: direction,\n          gap,\n        },\n        styleProp,\n      ),\n    [gap, direction, styleProp],\n  );\n\n  const horizontal = [\"row\", \"row-reverse\"].includes(style.flexDirection);\n\n  useDraggableStack({\n    gap: style.gap,\n    horizontal,\n    initialOrder,\n    onOrderChange,\n    onOrderUpdate,\n    shouldSwapWorklet,\n  });\n\n  return <View style={style}>{children}</View>;\n};\n"]}