{"version":3,"file":"useDroppable.js","sourceRoot":"","sources":["../../src/hooks/useDroppable.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,OAAO,CAAC;AAExC,OAAO,EAAE,OAAO,EAAE,mBAAmB,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAC;AACvF,OAAO,EAAE,aAAa,EAAE,MAAM,eAAe,CAAC;AAC9C,OAAO,EAAE,oBAAoB,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AAE5D,OAAO,EAAE,MAAM,EAAE,uBAAuB,EAAE,MAAM,UAAU,CAAC;AAI3D;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,EAAE,EAAE,EAAE,IAAI,GAAG,EAAE,EAAE,QAAQ,GAAG,KAAK,EAAuB,EAAE,EAAE;IACvF,MAAM,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,YAAY,EAAE,eAAe,EAAE,GAC5F,aAAa,EAAE,CAAC;IAClB,8DAA8D;IAC9D,MAAM,CAAC,IAAI,EAAE,UAAU,CAAC,GAAG,UAAU,EAAsB,CAAC;IAC5D,gBAAgB;IAChB,sDAAsD;IACtD,MAAM,UAAU,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;IAErF,MAAM,MAAM,GAAG,cAAc,CAAkB;QAC7C,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,CAAC;QACJ,KAAK,EAAE,CAAC;QACR,MAAM,EAAE,CAAC;KACV,CAAC,CAAC;IAEH,mBAAmB,CACjB,GAAG,EAAE,CAAC,QAAQ,EACd,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE;QACb,IAAI,IAAI,KAAK,IAAI,EAAE,CAAC;YAClB,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACjD,CAAC;IACH,CAAC,EACD,CAAC,QAAQ,CAAC,CACX,CAAC;IAEF,eAAe,CAAC,GAAG,EAAE;QACnB,MAAM,eAAe,GAAG,GAAG,EAAE;YAC3B,SAAS,CAAC;YACV,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;YACpC,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC;QAClE,CAAC,CAAC;QACF,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC;QAC3B,OAAO,GAAG,EAAE;YACV,MAAM,eAAe,GAAG,GAAG,EAAE;gBAC3B,SAAS,CAAC;gBACV,OAAO,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBAClC,OAAO,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACpC,CAAC,CAAC;YACF,+BAA+B;YAC/B,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC;QAC7B,CAAC,CAAC;QACF,uDAAuD;IACzD,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,QAAQ,GAA0B,GAAG,EAAE;QAC3C,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QAC7B,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE;YACxE,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,OAAO,EAAE,UAAU,EAAE,aAAa,EAAE,QAAQ,EAAE,QAAQ,EAAE,iBAAiB,EAAE,eAAe,EAAE,CAAC;AAC/F,CAAC,CAAC","sourcesContent":["import { useLayoutEffect } from \"react\";\nimport { type LayoutRectangle, type ViewProps } from \"react-native\";\nimport { runOnUI, useAnimatedReaction, useSharedValue } from \"react-native-reanimated\";\nimport { useDndContext } from \"../DndContext\";\nimport { useLatestSharedValue, useNodeRef } from \"../hooks\";\nimport type { Data, NativeElement, UniqueIdentifier } from \"../types\";\nimport { assert, isReanimatedSharedValue } from \"../utils\";\n\nexport type UseDroppableOptions = { id: UniqueIdentifier; data?: Data; disabled?: boolean };\n\n/**\n * useDroppable is a custom hook that provides functionality for making a component droppable within a drag and drop context.\n *\n * @function\n * @example\n * const { setNodeRef, setNodeLayout, activeId, panGestureState } = useDroppable({ id: 'droppable-1' });\n *\n * @param {object} options - The options that define the behavior of the droppable component.\n * @param {string} options.id - A unique identifier for the droppable component.\n * @param {object} [options.data={}] - Optional data associated with the droppable component.\n * @param {boolean} [options.disabled=false] - A flag that indicates whether the droppable component is disabled.\n *\n * @returns {object} Returns an object with properties and methods related to the droppable component.\n * @property {Function} setNodeRef - A function that can be used to set the ref of the droppable component.\n * @property {Function} setNodeLayout - A function that handles the layout event of the droppable component.\n * @property {string} activeId - The unique identifier of the currently active droppable component.\n * @property {object} panGestureState - An object representing the current state of the draggable component within the context.\n */\nexport const useDroppable = ({ id, data = {}, disabled = false }: UseDroppableOptions) => {\n  const { droppableLayouts, droppableOptions, droppableActiveId, containerRef, panGestureState } =\n    useDndContext();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const [node, setNodeRef] = useNodeRef<NativeElement, any>();\n  //            ^?\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const sharedData = isReanimatedSharedValue(data) ? data : useLatestSharedValue(data);\n\n  const layout = useSharedValue<LayoutRectangle>({\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n  });\n\n  useAnimatedReaction(\n    () => disabled,\n    (next, prev) => {\n      if (next !== prev) {\n        droppableOptions.value[id].disabled = disabled;\n      }\n    },\n    [disabled],\n  );\n\n  useLayoutEffect(() => {\n    const runLayoutEffect = () => {\n      \"worklet\";\n      droppableLayouts.value[id] = layout;\n      droppableOptions.value[id] = { id, data: sharedData, disabled };\n    };\n    runOnUI(runLayoutEffect)();\n    return () => {\n      const runLayoutEffect = () => {\n        \"worklet\";\n        delete droppableLayouts.value[id];\n        delete droppableOptions.value[id];\n      };\n      // if(node && node.key === key)\n      runOnUI(runLayoutEffect)();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onLayout: ViewProps[\"onLayout\"] = () => {\n    assert(containerRef.current);\n    node.current?.measureLayout(containerRef.current, (x, y, width, height) => {\n      layout.value = { x, y, width, height };\n    });\n  };\n\n  return { setNodeRef, setNodeLayout: onLayout, activeId: droppableActiveId, panGestureState };\n};\n"]}