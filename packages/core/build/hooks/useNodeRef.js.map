{"version":3,"file":"useNodeRef.js","sourceRoot":"","sources":["../../src/hooks/useNodeRef.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAC5C,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAItC;;GAEG;AACH,MAAM,CAAC,MAAM,UAAU,GAAG,CAAW,QAA+B,EAAE,EAAE;IACtE,MAAM,eAAe,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC3C,MAAM,OAAO,GAAG,MAAM,CAAW,IAAI,CAAC,CAAC;IACvC,MAAM,UAAU,GAAG,WAAW,CAC5B,CAAC,OAAiB,EAAE,EAAE;QACpB,IAAI,OAAO,KAAK,OAAO,CAAC,OAAO,EAAE,CAAC;YAChC,eAAe,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;QAC9C,CAAC;QACD,OAAO,CAAC,OAAO,GAAG,OAAY,CAAC;IACjC,CAAC;IACD,uDAAuD;IACvD,EAAE,CACH,CAAC;IAEF,OAAO,CAAC,OAAO,EAAE,UAAU,CAAU,CAAC;AACxC,CAAC,CAAC","sourcesContent":["import { useCallback, useRef } from \"react\";\nimport { useEvent } from \"./useEvent\";\n\ntype NodeChangeHandler<T> = (nextElement: T | null, prevElement: T | null) => void;\n\n/**\n * Hook to receive a stable ref setter with an optional onChange handler\n */\nexport const useNodeRef = <T, U = T>(onChange?: NodeChangeHandler<T>) => {\n  const onChangeHandler = useEvent(onChange);\n  const nodeRef = useRef<T | null>(null);\n  const setNodeRef = useCallback(\n    (element: U | null) => {\n      if (element !== nodeRef.current) {\n        onChangeHandler?.(element, nodeRef.current);\n      }\n      nodeRef.current = element as T;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [],\n  );\n\n  return [nodeRef, setNodeRef] as const;\n};\n"]}