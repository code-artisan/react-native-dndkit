{"version":3,"file":"DndProvider.js","sourceRoot":"","sources":["../src/DndProvider.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EACZ,UAAU,EAEV,mBAAmB,EACnB,OAAO,EACP,MAAM,GACP,MAAM,OAAO,CAAC;AACf,OAAO,EAIL,IAAI,GAEL,MAAM,cAAc,CAAC;AACtB,OAAO,EACL,OAAO,EACP,eAAe,EAKf,KAAK,GACN,MAAM,8BAA8B,CAAC;AACtC,sCAAsC;AACtC,yBAAyB;AACzB,yCAAyC;AACzC,OAAO,EACL,eAAe,EACf,OAAO,EACP,OAAO;AACP,uBAAuB;AACvB,cAAc,GAEf,MAAM,yBAAyB,CAAC;AAEjC,OAAO,EACL,UAAU,GAQX,MAAM,cAAc,CAAC;AACtB,OAAO,EAAE,cAAc,EAAE,MAAM,SAAS,CAAC;AAEzC,OAAO,EACL,sBAAsB,EACtB,WAAW,EACX,WAAW,EACX,aAAa,EACb,iBAAiB,GAGlB,MAAM,SAAS,CAAC;AAkCjB,MAAM,CAAC,MAAM,WAAW,GAAG,UAAU,CAGnC,SAAS,WAAW,CACpB,EACE,QAAQ,EACR,YAAY,GAAG,EAAE,EACjB,WAAW,GAAG,CAAC,EACf,eAAe,GAAG,CAAC,EACnB,QAAQ,EACR,QAAQ;AACR,kBAAkB;AAClB,SAAS,EACT,OAAO,EACP,QAAQ,EACR,UAAU,EACV,KAAK,EACL,KAAK,GACN,EACD,GAAG;IAEH,MAAM,YAAY,GAAG,MAAM,CAAc,IAAI,CAAC,CAAC;IAC/C,MAAM,gBAAgB,GAAG,cAAc,CAAU,EAAE,CAAC,CAAC;IACrD,MAAM,gBAAgB,GAAG,cAAc,CAAU,EAAE,CAAC,CAAC;IACrD,MAAM,gBAAgB,GAAG,cAAc,CAAmB,EAAE,CAAC,CAAC;IAC9D,MAAM,gBAAgB,GAAG,cAAc,CAAmB,EAAE,CAAC,CAAC;IAC9D,MAAM,gBAAgB,GAAG,cAAc,CAAU,EAAE,CAAC,CAAC;IACrD,MAAM,uBAAuB,GAAG,cAAc,CAAU,EAAE,CAAC,CAAC;IAC5D,MAAM,eAAe,GAAG,cAAc,CAAkB,EAAE,CAAC,CAAC;IAC5D,MAAM,kBAAkB,GAAG,cAAc,CAA0B,IAAI,CAAC,CAAC;IACzE,MAAM,iBAAiB,GAAG,cAAc,CAA0B,IAAI,CAAC,CAAC;IACxE,MAAM,iBAAiB,GAAG,cAAc,CAA0B,IAAI,CAAC,CAAC;IACxE,MAAM,qBAAqB,GAAG,cAAc,CAAmB,IAAI,CAAC,CAAC;IACrE,MAAM,sBAAsB,GAAG,cAAc,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACpD,MAAM,sBAAsB,GAAG,cAAc,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACpD,MAAM,eAAe,GAAG,cAAc,CAA+B,CAAC,CAAC,CAAC;IAExE,8BAA8B;IAC9B,0BAA0B;IAC1B,yDAAyD;IACzD,MAAM;IACN,KAAK;IAEL,uBAAuB;IACvB,mCAAmC;IACnC,sBAAsB;IACtB,2BAA2B;IAC3B,uCAAuC;IACvC,QAAQ;IACR,2BAA2B;IAC3B,gCAAgC;IAChC,QAAQ;IACR,OAAO;IACP,yBAAyB;IACzB,KAAK;IAEL,MAAM,YAAY,GAAG,MAAM,CAAkB;QAC3C,YAAY;QACZ,gBAAgB;QAChB,gBAAgB;QAChB,gBAAgB;QAChB,gBAAgB;QAChB,gBAAgB;QAChB,uBAAuB;QACvB,eAAe;QACf,kBAAkB;QAClB,iBAAiB;QACjB,iBAAiB;QACjB,eAAe;QACf,sBAAsB;QACtB,qBAAqB;QACrB,sBAAsB;KACvB,CAAC,CAAC;IAEH,mBAAmB,CACjB,GAAG,EACH,GAAG,EAAE;QACH,OAAO;YACL,gBAAgB;YAChB,gBAAgB;YAChB,uBAAuB;YACvB,iBAAiB;SAClB,CAAC;IACJ,CAAC;IACD,uDAAuD;IACvD,EAAE,CACH,CAAC;IAEF,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,EAAE;QAC9B,MAAM,kBAAkB,GAAG,CAAC,KAAY,EAA2B,EAAE;YACnE,SAAS,CAAC;YACV,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,KAAK,CAAC;YACvB,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,gBAAgB,CAAC;YAC5C,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,gBAAgB,CAAC;YAC5C,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,gBAAgB,CAAC;YAC5C,KAAK,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;gBACnD,oDAAoD;gBACpD,MAAM,MAAM,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;gBAC3B,MAAM,UAAU,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC;gBACxC,IACE,CAAC,UAAU;oBACX,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE;wBAC1B,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,sBAAsB,CAAC,CAAC,CAAC,KAAK;wBACtD,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,sBAAsB,CAAC,CAAC,CAAC,KAAK;qBACvD,CAAC,EACF,CAAC;oBACD,OAAO,EAAE,CAAC;gBACZ,CAAC;YACH,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAEF,MAAM,qBAAqB,GAAG,CAC5B,YAA6B,EACJ,EAAE;YAC3B,SAAS,CAAC;YACV,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,gBAAgB,CAAC;YAC5C,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,gBAAgB,CAAC;YAC5C,KAAK,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;gBACnD,oDAAoD;gBACpD,MAAM,UAAU,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC;gBACxC,IAAI,CAAC,UAAU,IAAI,iBAAiB,CAAC,YAAY,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;oBACjE,OAAO,EAAE,CAAC;gBACZ,CAAC;YACH,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAEF,kDAAkD;QAClD,IAAI,OAAO,GAAyC,IAAI,CAAC;QACzD,MAAM,oBAAoB,GAAG,GAAG,EAAE;YAChC,IAAI,OAAO,EAAE,CAAC;gBACZ,YAAY,CAAC,OAAO,CAAC,CAAC;YACxB,CAAC;QACH,CAAC,CAAC;QACF,MAAM,WAAW,GAAG,CAAC,EAAoB,EAAE,KAAa,EAAE,EAAE;YAC1D,OAAO,GAAG,UAAU,CAAC,GAAG,EAAE;gBACxB,OAAO,CAAC,GAAG,EAAE;oBACX,SAAS,CAAC;oBACV,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,EAAE,CAAC,CAAC;oBACxD,iBAAiB,CAAC,KAAK,GAAG,EAAE,CAAC;oBAC7B,eAAe,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC;gBAC/C,CAAC,CAAC,EAAE,CAAC;YACP,CAAC,EAAE,KAAK,CAAC,CAAC;QACZ,CAAC,CAAC;QAEF,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,EAAE;aAC7B,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YACjB,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,KAAK,CAAC;YAC9B,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YAC/C,+BAA+B;YAC/B,IAAI,QAAQ,EAAE,CAAC;gBACb,OAAO;YACT,CAAC;YACD,yCAAyC;YACzC,gDAAgD;YAChD,eAAe,CAAC,KAAK,GAAG,KAAK,CAAC;YAC9B,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,gBAAgB,CAAC;YAC5C,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,gBAAgB,CAAC;YAC5C,MAAM,EAAE,KAAK,EAAE,cAAc,EAAE,GAAG,uBAAuB,CAAC;YAC1D,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,gBAAgB,CAAC;YAC5C,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,eAAe,CAAC;YAC1C,wDAAwD;YACxD,6DAA6D;YAC7D,IAAI;YACJ,0CAA0C;YAC1C,MAAM,QAAQ,GAAG,kBAAkB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YAC9C,yCAAyC;YACzC,IAAI,QAAQ,KAAK,IAAI,EAAE,CAAC;gBACtB,0EAA0E;gBAC1E,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC;gBAC7C,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;gBACvC,MAAM,aAAa,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAC;gBAC/C,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAChD,sBAAsB,CAAC,CAAC,CAAC,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC;gBACtD,sBAAsB,CAAC,CAAC,CAAC,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC;gBACtD,8EAA8E;gBAC9E,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;oBACjD,eAAe,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBAChC,eAAe,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBAChC,wEAAwE;oBACxE,wDAAwD;gBAC1D,CAAC;qBAAM,CAAC;oBACN,oBAAoB;oBACpB,sEAAsE;oBACtE,aAAa,CAAC,CAAC,CAAC,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC;oBAC7C,aAAa,CAAC,CAAC,CAAC,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC;gBAC/C,CAAC;gBACD,qDAAqD;gBACrD,MAAM,EAAE,eAAe,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;gBAC9C,IAAI,eAAe,GAAG,CAAC,EAAE,CAAC;oBACxB,kBAAkB,CAAC,KAAK,GAAG,QAAQ,CAAC;oBACpC,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,KAAK,GAAG,SAAS,CAAC;oBAClD,OAAO,CAAC,WAAW,CAAC,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;oBAChD,qBAAqB;gBACvB,CAAC;qBAAM,CAAC;oBACN,iBAAiB,CAAC,KAAK,GAAG,QAAQ,CAAC;oBACnC,qBAAqB,CAAC,KAAK,GAAG,WAAW,CAAC,YAAY,EAAE;wBACtD,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC,KAAK;wBACvB,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC,KAAK;qBACxB,CAAC,CAAC;oBACH,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC;gBACrD,CAAC;gBAED,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,YAAY,EAAE,CAAC,CAAC;YAC/C,CAAC;QACH,CAAC,CAAC;aACD,QAAQ,CAAC,CAAC,KAAK,EAAE,EAAE;YAClB,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC;YACpD,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,YAAY,EAAE,CAAC,CAAC;YACtE,gDAAgD;YAChD,eAAe,CAAC,KAAK,GAAG,KAAK,CAAC;YAC9B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,iBAAiB,CAAC;YAC9C,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,kBAAkB,CAAC;YAChD,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,gBAAgB,CAAC;YAC5C,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,gBAAgB,CAAC;YAC5C,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,gBAAgB,CAAC;YAC5C,6CAA6C;YAE7C,IAAI,QAAQ,KAAK,IAAI,EAAE,CAAC;gBACtB,yDAAyD;gBACzD,IAAI,SAAS,KAAK,IAAI,EAAE,CAAC;oBACvB,MAAM,EAAE,mBAAmB,EAAE,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;oBACnD,uDAAuD;oBACvD,MAAM,QAAQ,GAAG,WAAW,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;oBACzD,IAAI,QAAQ,GAAG,mBAAmB,EAAE,CAAC;wBACnC,OAAO,CAAC,oBAAoB,CAAC,EAAE,CAAC;wBAChC,kBAAkB,CAAC,KAAK,GAAG,IAAI,CAAC;oBAClC,CAAC;gBACH,CAAC;gBACD,gCAAgC;gBAChC,OAAO;YACT,CAAC;YAED,kDAAkD;YAClD,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;YACvC,YAAY,CAAC,CAAC,CAAC,KAAK,GAAG,sBAAsB,CAAC,CAAC,CAAC,KAAK,GAAG,YAAY,CAAC;YACrE,YAAY,CAAC,CAAC,CAAC,KAAK,GAAG,sBAAsB,CAAC,CAAC,CAAC,KAAK,GAAG,YAAY,CAAC;YAErE,uCAAuC;YACvC,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC;YAC7C,qBAAqB,CAAC,KAAK,GAAG,WAAW,CAAC,YAAY,EAAE;gBACtD,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC,KAAK;gBACvB,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC,KAAK;aACxB,CAAC,CAAC;YAEH,iBAAiB,CAAC,KAAK,GAAG,qBAAqB,CAC7C,qBAAqB,CAAC,KAAK,CAC5B,CAAC;YAEF,QAAQ,EAAE,CAAC,KAAK,EAAE;gBAChB,QAAQ;gBACR,YAAY,EAAE,qBAAqB,CAAC,KAAK;aAC1C,CAAC,CAAC;QACL,CAAC,CAAC;aACD,UAAU,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC;YAC9C,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC;YAClE,gDAAgD;YAChD,eAAe,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,6BAA6B;YAC5D,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,iBAAiB,CAAC;YAC9C,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,kBAAkB,CAAC;YAChD,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,gBAAgB,CAAC;YAC5C,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,gBAAgB,CAAC;YAC5C,MAAM,EAAE,KAAK,EAAE,cAAc,EAAE,GAAG,uBAAuB,CAAC;YAC1D,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,eAAe,CAAC;YAC1C,gCAAgC;YAChC,IAAI,QAAQ,KAAK,IAAI,EAAE,CAAC;gBACtB,0DAA0D;gBAC1D,IAAI,SAAS,KAAK,IAAI,EAAE,CAAC;oBACvB,OAAO,CAAC,oBAAoB,CAAC,EAAE,CAAC;oBAChC,kBAAkB,CAAC,KAAK,GAAG,IAAI,CAAC;gBAClC,CAAC;gBACD,OAAO;YACT,CAAC;YACD,8DAA8D;YAC9D,iBAAiB,CAAC,KAAK,GAAG,IAAI,CAAC;YAC/B,IAAI,UAAU,EAAE,CAAC;gBACf,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC;gBAC7C,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;gBACvC,MAAM,aAAa,GAAG,WAAW,CAAC,YAAY,EAAE;oBAC9C,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC,KAAK;oBACvB,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC,KAAK;iBACxB,CAAC,CAAC;gBACH,UAAU,CAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,YAAY,EAAE,aAAa,EAAE,CAAC,CAAC;YAC/D,CAAC;YACD,WAAW;YACX,IAAI,KAAK,KAAK,KAAK,CAAC,MAAM,IAAI,SAAS,EAAE,CAAC;gBACxC,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,iBAAiB,CAAC;gBAClD,SAAS,CAAC;oBACR,MAAM,EAAE,gBAAgB,CAAC,KAAK,CAAC,QAAQ,CAAC;oBACxC,IAAI,EAAE,YAAY,KAAK,IAAI,CAAC,CAAC,CAAC,gBAAgB,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI;iBAC1E,CAAC,CAAC;YACL,CAAC;YACD,kBAAkB;YAClB,iBAAiB,CAAC,KAAK,GAAG,IAAI,CAAC;YAC/B,gCAAgC;YAChC,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;YACvC,MAAM,aAAa,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAC;YAC/C,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,GAAG,QAAQ,CAAC;YAClC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG;gBACzB,aAAa,CAAC,CAAC,CAAC,KAAK;gBACrB,aAAa,CAAC,CAAC,CAAC,KAAK;aACtB,CAAC;YAEF,sBAAsB,CACpB,YAAY,EACZ,CAAC,OAAO,EAAE,OAAO,CAAC,EAClB;gBACE,EAAE,GAAG,YAAY,EAAE,QAAQ,EAAE,SAAS,EAAE;gBACxC,EAAE,GAAG,YAAY,EAAE,QAAQ,EAAE,SAAS,EAAE;aACzC,EACD,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE,EAAE;gBACzB,oDAAoD;gBACpD,IACE,eAAe,CAAC,KAAK,KAAK,KAAK,CAAC,GAAG;oBACnC,eAAe,CAAC,KAAK,KAAK,KAAK,CAAC,MAAM;oBACtC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,KAAK,QAAQ,EACnC,CAAC;oBACD,OAAO;gBACT,CAAC;gBACD,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,GAAG,SAAS,CAAC;gBACnC,IAAI,CAAC,SAAS,IAAI,CAAC,SAAS,EAAE,CAAC;oBAC7B,wFAAwF;gBAC1F,CAAC;gBACD,wDAAwD;gBACxD,mFAAmF;gBACnF,IAAI;YACN,CAAC,CACF,CAAC;QACJ,CAAC,CAAC;aACD,UAAU,CAAC,iBAAiB,CAAC,CAAC;QAEjC,uFAAuF;QACvF,oEAAoE;QACpE,IAAI,eAAe,GAAG,CAAC,EAAE,CAAC;YACxB,UAAU,CAAC,sBAAsB,CAAC,eAAe,CAAC,CAAC;QACrD,CAAC;QAED,qHAAqH;QACrH,IAAI,WAAW,GAAG,CAAC,EAAE,CAAC;YACpB,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QACtC,CAAC;QAED,OAAO,UAAU,CAAC;IACpB,CAAC,EAAE;QACD,QAAQ;QACR,eAAe;QACf,gBAAgB;QAChB,gBAAgB;QAChB,gBAAgB;QAChB,gBAAgB;QAChB,gBAAgB;QAChB,uBAAuB;QACvB,kBAAkB;QAClB,iBAAiB;QACjB,iBAAiB;QACjB,eAAe;QACf,sBAAsB;QACtB,qBAAqB;QACrB,sBAAsB;KACvB,CAAC,CAAC;IAEH,OAAO,CACL,oBAAC,UAAU,CAAC,QAAQ,IAAC,KAAK,EAAE,YAAY,CAAC,OAAO;QAC9C,oBAAC,eAAe,IAAC,OAAO,EAAE,UAAU;YAClC,oBAAC,IAAI,IACH,GAAG,EAAE,YAAY,EACjB,WAAW,EAAE,KAAK,EAClB,QAAQ,EAAE,QAAQ,EAClB,KAAK,EAAE,KAAK,EACZ,MAAM,EAAC,MAAM,IAEZ,QAAQ,CACJ,CACS,CACE,CACvB,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import React, {\n  forwardRef,\n  PropsWithChildren,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n} from \"react\";\nimport {\n  LayoutChangeEvent,\n  LayoutRectangle,\n  StyleProp,\n  View,\n  ViewStyle,\n} from \"react-native\";\nimport {\n  Gesture,\n  GestureDetector,\n  GestureEventPayload,\n  GestureStateChangeEvent,\n  GestureUpdateEvent,\n  PanGestureHandlerEventPayload,\n  State,\n} from \"react-native-gesture-handler\";\n// import ReactNativeHapticFeedback, {\n//   HapticFeedbackTypes,\n// } from \"react-native-haptic-feedback\";\nimport {\n  cancelAnimation,\n  runOnJS,\n  runOnUI,\n  // useAnimatedReaction,\n  useSharedValue,\n  type WithSpringConfig,\n} from \"react-native-reanimated\";\n\nimport {\n  DndContext,\n  DraggableStates,\n  type DndContextValue,\n  type DraggableOptions,\n  type DroppableOptions,\n  type ItemOptions,\n  type Layouts,\n  type Offsets,\n} from \"./DndContext\";\nimport { useSharedPoint } from \"./hooks\";\nimport type { UniqueIdentifier } from \"./types\";\nimport {\n  animatePointWithSpring,\n  applyOffset,\n  getDistance,\n  includesPoint,\n  overlapsRectangle,\n  Point,\n  Rectangle,\n} from \"./utils\";\n\nexport type DndProviderProps = {\n  springConfig?: WithSpringConfig;\n  activationDelay?: number;\n  minDistance?: number;\n  disabled?: boolean;\n  onLayout?: (ev: LayoutChangeEvent) => void;\n  onDragEnd?: (ev: { active: ItemOptions; over: ItemOptions | null }) => void;\n  onBegin?: (\n    event: GestureStateChangeEvent<PanGestureHandlerEventPayload>,\n    meta: { activeId: UniqueIdentifier; activeLayout: LayoutRectangle },\n  ) => void;\n  onUpdate?: (\n    event: GestureUpdateEvent<PanGestureHandlerEventPayload>,\n    meta: { activeId: UniqueIdentifier; activeLayout: LayoutRectangle },\n  ) => void;\n  onFinalize?: (\n    event: GestureStateChangeEvent<PanGestureHandlerEventPayload>,\n    meta: { activeId: UniqueIdentifier; activeLayout: LayoutRectangle },\n  ) => void;\n  // hapticFeedback?: HapticFeedbackTypes;\n  style?: StyleProp<ViewStyle>;\n  debug?: boolean;\n};\n\nexport type DndProviderHandle = Pick<\n  DndContextValue,\n  | \"draggableLayouts\"\n  | \"draggableOffsets\"\n  | \"draggableRestingOffsets\"\n  | \"draggableActiveId\"\n>;\n\nexport const DndProvider = forwardRef<\n  DndProviderHandle,\n  PropsWithChildren<DndProviderProps>\n>(function DndProvider(\n  {\n    children,\n    springConfig = {},\n    minDistance = 0,\n    activationDelay = 0,\n    disabled,\n    onLayout,\n    // hapticFeedback,\n    onDragEnd,\n    onBegin,\n    onUpdate,\n    onFinalize,\n    style,\n    debug,\n  },\n  ref,\n) {\n  const containerRef = useRef<View | null>(null);\n  const draggableLayouts = useSharedValue<Layouts>({});\n  const droppableLayouts = useSharedValue<Layouts>({});\n  const draggableOptions = useSharedValue<DraggableOptions>({});\n  const droppableOptions = useSharedValue<DroppableOptions>({});\n  const draggableOffsets = useSharedValue<Offsets>({});\n  const draggableRestingOffsets = useSharedValue<Offsets>({});\n  const draggableStates = useSharedValue<DraggableStates>({});\n  const draggablePendingId = useSharedValue<UniqueIdentifier | null>(null);\n  const draggableActiveId = useSharedValue<UniqueIdentifier | null>(null);\n  const droppableActiveId = useSharedValue<UniqueIdentifier | null>(null);\n  const draggableActiveLayout = useSharedValue<Rectangle | null>(null);\n  const draggableInitialOffset = useSharedPoint(0, 0);\n  const draggableContentOffset = useSharedPoint(0, 0);\n  const panGestureState = useSharedValue<GestureEventPayload[\"state\"]>(0);\n\n  // const runFeedback = () => {\n  //   if (hapticFeedback) {\n  //     ReactNativeHapticFeedback.trigger(hapticFeedback);\n  //   }\n  // };\n\n  // useAnimatedReaction(\n  //   () => draggableActiveId.value,\n  //   (next, prev) => {\n  //     if (next !== prev) {\n  //       // runOnJS(setActiveId)(next);\n  //     }\n  //     if (next !== null) {\n  //       runOnJS(runFeedback)();\n  //     }\n  //   },\n  //   [draggableActiveId],\n  // );\n\n  const contextValue = useRef<DndContextValue>({\n    containerRef,\n    draggableLayouts,\n    droppableLayouts,\n    draggableOptions,\n    droppableOptions,\n    draggableOffsets,\n    draggableRestingOffsets,\n    draggableStates,\n    draggablePendingId,\n    draggableActiveId,\n    droppableActiveId,\n    panGestureState,\n    draggableInitialOffset,\n    draggableActiveLayout,\n    draggableContentOffset,\n  });\n\n  useImperativeHandle(\n    ref,\n    () => {\n      return {\n        draggableLayouts,\n        draggableOffsets,\n        draggableRestingOffsets,\n        draggableActiveId,\n      };\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [],\n  );\n\n  const panGesture = useMemo(() => {\n    const findActiveLayoutId = (point: Point): UniqueIdentifier | null => {\n      \"worklet\";\n      const { x, y } = point;\n      const { value: layouts } = draggableLayouts;\n      const { value: offsets } = draggableOffsets;\n      const { value: options } = draggableOptions;\n      for (const [id, layout] of Object.entries(layouts)) {\n        // console.log({ [id]: floorLayout(layout.value) });\n        const offset = offsets[id];\n        const isDisabled = options[id].disabled;\n        if (\n          !isDisabled &&\n          includesPoint(layout.value, {\n            x: x - offset.x.value + draggableContentOffset.x.value,\n            y: y - offset.y.value + draggableContentOffset.y.value,\n          })\n        ) {\n          return id;\n        }\n      }\n      return null;\n    };\n\n    const findDroppableLayoutId = (\n      activeLayout: LayoutRectangle,\n    ): UniqueIdentifier | null => {\n      \"worklet\";\n      const { value: layouts } = droppableLayouts;\n      const { value: options } = droppableOptions;\n      for (const [id, layout] of Object.entries(layouts)) {\n        // console.log({ [id]: floorLayout(layout.value) });\n        const isDisabled = options[id].disabled;\n        if (!isDisabled && overlapsRectangle(activeLayout, layout.value)) {\n          return id;\n        }\n      }\n      return null;\n    };\n\n    // Helpers for delayed activation (eg. long press)\n    let timeout: ReturnType<typeof setTimeout> | null = null;\n    const clearActiveIdTimeout = () => {\n      if (timeout) {\n        clearTimeout(timeout);\n      }\n    };\n    const setActiveId = (id: UniqueIdentifier, delay: number) => {\n      timeout = setTimeout(() => {\n        runOnUI(() => {\n          \"worklet\";\n          debug && console.log(`draggableActiveId.value = ${id}`);\n          draggableActiveId.value = id;\n          draggableStates.value[id].value = \"dragging\";\n        })();\n      }, delay);\n    };\n\n    const panGesture = Gesture.Pan()\n      .onBegin((event) => {\n        const { state, x, y } = event;\n        debug && console.log(\"begin\", { state, x, y });\n        // Gesture is globally disabled\n        if (disabled) {\n          return;\n        }\n        // console.log(\"begin\", { state, x, y });\n        // Track current state for cancellation purposes\n        panGestureState.value = state;\n        const { value: layouts } = draggableLayouts;\n        const { value: offsets } = draggableOffsets;\n        const { value: restingOffsets } = draggableRestingOffsets;\n        const { value: options } = draggableOptions;\n        const { value: states } = draggableStates;\n        // for (const [id, offset] of Object.entries(offsets)) {\n        //   console.log({ [id]: [offset.x.value, offset.y.value] });\n        // }\n        // Find the active layout key under {x, y}\n        const activeId = findActiveLayoutId({ x, y });\n        // Check if an item was actually selected\n        if (activeId !== null) {\n          // Record any ongoing current offset as our initial offset for the gesture\n          const activeLayout = layouts[activeId].value;\n          const activeOffset = offsets[activeId];\n          const restingOffset = restingOffsets[activeId];\n          const { value: activeState } = states[activeId];\n          draggableInitialOffset.x.value = activeOffset.x.value;\n          draggableInitialOffset.y.value = activeOffset.y.value;\n          // Cancel the ongoing animation if we just reactivated an acting/dragging item\n          if ([\"dragging\", \"acting\"].includes(activeState)) {\n            cancelAnimation(activeOffset.x);\n            cancelAnimation(activeOffset.y);\n            // If not we should reset the resting offset to the current offset value\n            // But only if the item is not currently still animating\n          } else {\n            // active or pending\n            // Record current offset as our natural resting offset for the gesture\n            restingOffset.x.value = activeOffset.x.value;\n            restingOffset.y.value = activeOffset.y.value;\n          }\n          // Update activeId directly or with an optional delay\n          const { activationDelay } = options[activeId];\n          if (activationDelay > 0) {\n            draggablePendingId.value = activeId;\n            draggableStates.value[activeId].value = \"pending\";\n            runOnJS(setActiveId)(activeId, activationDelay);\n            // @TODO activeLayout\n          } else {\n            draggableActiveId.value = activeId;\n            draggableActiveLayout.value = applyOffset(activeLayout, {\n              x: activeOffset.x.value,\n              y: activeOffset.y.value,\n            });\n            draggableStates.value[activeId].value = \"dragging\";\n          }\n\n          onBegin?.(event, { activeId, activeLayout });\n        }\n      })\n      .onUpdate((event) => {\n        const { state, translationX, translationY } = event;\n        debug && console.log(\"update\", { state, translationX, translationY });\n        // Track current state for cancellation purposes\n        panGestureState.value = state;\n        const { value: activeId } = draggableActiveId;\n        const { value: pendingId } = draggablePendingId;\n        const { value: options } = draggableOptions;\n        const { value: layouts } = draggableLayouts;\n        const { value: offsets } = draggableOffsets;\n        // const { value: states } = draggableStates;\n\n        if (activeId === null) {\n          // Check if we are currently waiting for activation delay\n          if (pendingId !== null) {\n            const { activationTolerance } = options[pendingId];\n            // Check if we've moved beyond the activation tolerance\n            const distance = getDistance(translationX, translationY);\n            if (distance > activationTolerance) {\n              runOnJS(clearActiveIdTimeout)();\n              draggablePendingId.value = null;\n            }\n          }\n          // Ignore item-free interactions\n          return;\n        }\n\n        // Update our active offset to pan the active item\n        const activeOffset = offsets[activeId];\n        activeOffset.x.value = draggableInitialOffset.x.value + translationX;\n        activeOffset.y.value = draggableInitialOffset.y.value + translationY;\n\n        // Check potential droppable candidates\n        const activeLayout = layouts[activeId].value;\n        draggableActiveLayout.value = applyOffset(activeLayout, {\n          x: activeOffset.x.value,\n          y: activeOffset.y.value,\n        });\n\n        droppableActiveId.value = findDroppableLayoutId(\n          draggableActiveLayout.value,\n        );\n\n        onUpdate?.(event, {\n          activeId,\n          activeLayout: draggableActiveLayout.value,\n        });\n      })\n      .onFinalize((event) => {\n        const { state, velocityX, velocityY } = event;\n        debug && console.log(\"finalize\", { state, velocityX, velocityY });\n        // Track current state for cancellation purposes\n        panGestureState.value = state; // can be `FAILED` or `ENDED`\n        const { value: activeId } = draggableActiveId;\n        const { value: pendingId } = draggablePendingId;\n        const { value: layouts } = draggableLayouts;\n        const { value: offsets } = draggableOffsets;\n        const { value: restingOffsets } = draggableRestingOffsets;\n        const { value: states } = draggableStates;\n        // Ignore item-free interactions\n        if (activeId === null) {\n          // Check if we were currently waiting for activation delay\n          if (pendingId !== null) {\n            runOnJS(clearActiveIdTimeout)();\n            draggablePendingId.value = null;\n          }\n          return;\n        }\n        // Reset interaction-related shared state for styling purposes\n        draggableActiveId.value = null;\n        if (onFinalize) {\n          const activeLayout = layouts[activeId].value;\n          const activeOffset = offsets[activeId];\n          const updatedLayout = applyOffset(activeLayout, {\n            x: activeOffset.x.value,\n            y: activeOffset.y.value,\n          });\n          onFinalize(event, { activeId, activeLayout: updatedLayout });\n        }\n        // Callback\n        if (state !== State.FAILED && onDragEnd) {\n          const { value: dropActiveId } = droppableActiveId;\n          onDragEnd({\n            active: draggableOptions.value[activeId],\n            over: dropActiveId !== null ? droppableOptions.value[dropActiveId] : null,\n          });\n        }\n        // Reset droppable\n        droppableActiveId.value = null;\n        // Move back to initial position\n        const activeOffset = offsets[activeId];\n        const restingOffset = restingOffsets[activeId];\n        states[activeId].value = \"acting\";\n        const [targetX, targetY] = [\n          restingOffset.x.value,\n          restingOffset.y.value,\n        ];\n\n        animatePointWithSpring(\n          activeOffset,\n          [targetX, targetY],\n          [\n            { ...springConfig, velocity: velocityX },\n            { ...springConfig, velocity: velocityY },\n          ],\n          ([finishedX, finishedY]) => {\n            // Cancel if we are interacting again with this item\n            if (\n              panGestureState.value !== State.END &&\n              panGestureState.value !== State.FAILED &&\n              states[activeId].value !== \"acting\"\n            ) {\n              return;\n            }\n            states[activeId].value = \"resting\";\n            if (!finishedX || !finishedY) {\n              // console.log(`${activeId} did not finish to reach ${targetX.toFixed(2)} ${currentX}`);\n            }\n            // for (const [id, offset] of Object.entries(offsets)) {\n            //   console.log({ [id]: [offset.x.value.toFixed(2), offset.y.value.toFixed(2)] });\n            // }\n          },\n        );\n      })\n      .withTestId(\"DndProvider.pan\");\n\n    // Duration in milliseconds of the LongPress gesture before Pan is allowed to activate.\n    // If the finger is moved during that period, the gesture will fail.\n    if (activationDelay > 0) {\n      panGesture.activateAfterLongPress(activationDelay);\n    }\n\n    // Minimum distance the finger (or multiple finger) need to travel before the gesture activates. Expressed in points.\n    if (minDistance > 0) {\n      panGesture.minDistance(minDistance);\n    }\n\n    return panGesture;\n  }, [\n    disabled,\n    activationDelay,\n    draggableLayouts,\n    droppableLayouts,\n    draggableOptions,\n    droppableOptions,\n    draggableOffsets,\n    draggableRestingOffsets,\n    draggablePendingId,\n    draggableActiveId,\n    droppableActiveId,\n    panGestureState,\n    draggableInitialOffset,\n    draggableActiveLayout,\n    draggableContentOffset\n  ]);\n\n  return (\n    <DndContext.Provider value={contextValue.current}>\n      <GestureDetector gesture={panGesture}>\n        <View\n          ref={containerRef}\n          collapsable={false}\n          onLayout={onLayout}\n          style={style}\n          testID=\"view\"\n        >\n          {children}\n        </View>\n      </GestureDetector>\n    </DndContext.Provider>\n  );\n});\n"]}