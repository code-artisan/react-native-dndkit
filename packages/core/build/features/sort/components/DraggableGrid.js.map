{"version":3,"file":"DraggableGrid.js","sourceRoot":"","sources":["../../../../src/features/sort/components/DraggableGrid.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAkD,MAAM,OAAO,CAAC;AACjG,OAAO,EAAqB,IAAI,EAAkC,MAAM,cAAc,CAAC;AAEvF,OAAO,EAAE,gBAAgB,EAAgC,MAAM,2BAA2B,CAAC;AAU3F,MAAM,CAAC,MAAM,aAAa,GAA6D,CAAC,EACtF,QAAQ,EACR,SAAS,GAAG,KAAK,EACjB,GAAG,GAAG,CAAC,EACP,QAAQ,EACR,aAAa,EACb,aAAa,EACb,iBAAiB,EACjB,IAAI,EACJ,KAAK,EAAE,SAAS,GACjB,EAAE,EAAE;IACH,MAAM,YAAY,GAAG,OAAO,CAC1B,GAAG,EAAE,CACH,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE;QAC/B,IAAI,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC;YAChC,OAAO,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;QACxB,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC,EAAE,MAAM,CAAC,OAAO,CAAuB,EAC3C,CAAC,QAAQ,CAAC,CACX,CAAC;IAEF,MAAM,KAAK,GAAG,OAAO,CACnB,GAAG,EAAE,CACH,MAAM,CAAC,MAAM,CACX;QACE,aAAa,EAAE,SAAS;QACxB,GAAG;QACH,QAAQ,EAAE,MAAM;KACjB,EACD,SAAS,CACV,EACH,CAAC,GAAG,EAAE,SAAS,EAAE,SAAS,CAAC,CAC5B,CAAC;IAEF,gBAAgB,CAAC;QACf,SAAS,EAAE,KAAK,CAAC,aAAa;QAC9B,GAAG,EAAE,KAAK,CAAC,GAAG;QACd,YAAY;QACZ,aAAa;QACb,aAAa;QACb,iBAAiB;QACjB,IAAI;KACL,CAAC,CAAC;IAEH,OAAO,oBAAC,IAAI,IAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,IAAG,QAAQ,CAAQ,CAAC;AACnE,CAAC,CAAC","sourcesContent":["import React, { Children, useMemo, type FunctionComponent, type PropsWithChildren } from \"react\";\nimport { LayoutChangeEvent, View, type FlexStyle, type ViewProps } from \"react-native\";\nimport type { UniqueIdentifier } from \"../../../types\";\nimport { useDraggableGrid, type UseDraggableGridOptions } from \"../hooks/useDraggableGrid\";\n\nexport type DraggableGridProps = Pick<ViewProps, \"style\"> &\n  Pick<UseDraggableGridOptions, \"onOrderChange\" | \"onOrderUpdate\" | \"shouldSwapWorklet\"> & {\n    direction?: FlexStyle[\"flexDirection\"];\n    size: number;\n    gap?: number;\n    onLayout?: (e: LayoutChangeEvent) => void\n  };\n\nexport const DraggableGrid: FunctionComponent<PropsWithChildren<DraggableGridProps>> = ({\n  children,\n  direction = \"row\",\n  gap = 0,\n  onLayout,\n  onOrderChange,\n  onOrderUpdate,\n  shouldSwapWorklet,\n  size,\n  style: styleProp,\n}) => {\n  const initialOrder = useMemo(\n    () =>\n      Children.map(children, (child) => {\n        if (React.isValidElement(child)) {\n          return child.props.id;\n        }\n        return null;\n      })?.filter(Boolean) as UniqueIdentifier[],\n    [children],\n  );\n\n  const style = useMemo(\n    () =>\n      Object.assign(\n        {\n          flexDirection: direction,\n          gap,\n          flexWrap: \"wrap\",\n        },\n        styleProp,\n      ),\n    [gap, direction, styleProp],\n  );\n\n  useDraggableGrid({\n    direction: style.flexDirection,\n    gap: style.gap,\n    initialOrder,\n    onOrderChange,\n    onOrderUpdate,\n    shouldSwapWorklet,\n    size,\n  });\n\n  return <View style={style} onLayout={onLayout}>{children}</View>;\n};\n"]}