{"version":3,"file":"useDraggableSort.js","sourceRoot":"","sources":["../../../../src/features/sort/hooks/useDraggableSort.ts"],"names":[],"mappings":"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","sourcesContent":["import { LayoutRectangle } from \"react-native\";\nimport { runOnJS, useAnimatedReaction, useSharedValue } from \"react-native-reanimated\";\nimport { useDndContext } from \"../../../DndContext\";\nimport type { UniqueIdentifier } from \"../../../types\";\nimport {\n  applyOffset,\n  arraysEqual,\n  centerAxis,\n  moveArrayIndex,\n  overlapsAxis,\n  type Rectangle,\n} from \"../../../utils\";\n\nexport type ShouldSwapWorklet = (activeLayout: Rectangle, itemLayout: Rectangle) => boolean;\n\nexport type UseDraggableSortOptions = {\n  initialOrder?: UniqueIdentifier[];\n  horizontal?: boolean;\n  onOrderChange?: (order: UniqueIdentifier[]) => void;\n  onOrderUpdate?: (nextOrder: UniqueIdentifier[], prevOrder: UniqueIdentifier[]) => void;\n  shouldSwapWorklet?: ShouldSwapWorklet;\n};\n\nexport const useDraggableSort = ({\n  horizontal = false,\n  initialOrder = [],\n  onOrderChange,\n  onOrderUpdate,\n  shouldSwapWorklet,\n}: UseDraggableSortOptions) => {\n  const { draggableActiveId, draggableActiveLayout, draggableOffsets, draggableLayouts } = useDndContext();\n\n  const draggablePlaceholderIndex = useSharedValue(-1);\n  const draggableLastOrder = useSharedValue<UniqueIdentifier[]>(initialOrder);\n  const draggableSortOrder = useSharedValue<UniqueIdentifier[]>(initialOrder);\n\n  // Core placeholder index logic\n  const findPlaceholderIndex = (activeLayout: LayoutRectangle): number => {\n    \"worklet\";\n    const { value: activeId } = draggableActiveId;\n    const { value: layouts } = draggableLayouts;\n    const { value: offsets } = draggableOffsets;\n    const { value: sortOrder } = draggableSortOrder;\n    const activeIndex = sortOrder.findIndex((id) => id === activeId);\n    // const activeCenterPoint = centerPoint(activeLayout);\n    // console.log(`activeLayout: ${JSON.stringify(activeLayout)}`);\n    for (let itemIndex = 0; itemIndex < sortOrder.length; itemIndex++) {\n      const itemId = sortOrder[itemIndex];\n      if (itemId === activeId) {\n        continue;\n      }\n      if (!layouts[itemId]) {\n        console.warn(`Unexpected missing layout ${itemId} in layouts!`);\n        continue;\n      }\n      const itemLayout = applyOffset(layouts[itemId].value, {\n        x: offsets[itemId].x.value,\n        y: offsets[itemId].y.value,\n      });\n\n      if (shouldSwapWorklet) {\n        if (shouldSwapWorklet(activeLayout, itemLayout)) {\n          // console.log(`Found placeholder index ${itemIndex} using custom shouldSwapWorklet!`);\n          return itemIndex;\n        }\n        continue;\n      }\n\n      // Default to center axis\n      const itemCenterAxis = centerAxis(itemLayout, horizontal);\n      if (overlapsAxis(activeLayout, itemCenterAxis, horizontal)) {\n        return itemIndex;\n      }\n    }\n    // Fallback to current index\n    // console.log(`Fallback to current index ${activeIndex}`);\n    return activeIndex;\n  };\n\n  // Track active layout changes and update the placeholder index\n  useAnimatedReaction(\n    () => [draggableActiveId.value, draggableActiveLayout.value] as const,\n    ([nextActiveId, nextActiveLayout], prev) => {\n      // Ignore initial reaction\n      if (prev === null) {\n        return;\n      }\n      // const [_prevActiveId, _prevActiveLayout] = prev;\n      // No active layout\n      if (nextActiveLayout === null) {\n        return;\n      }\n      // Reset the placeholder index when the active id changes\n      if (nextActiveId === null) {\n        draggablePlaceholderIndex.value = -1;\n        return;\n      }\n      // const axis = direction === \"row\" ? \"x\" : \"y\";\n      // const delta = prevActiveLayout !== null ? nextActiveLayout[axis] - prevActiveLayout[axis] : 0;\n      draggablePlaceholderIndex.value = findPlaceholderIndex(nextActiveLayout);\n    },\n    [draggablePlaceholderIndex, draggableActiveId, draggableActiveLayout],\n  );\n\n  // Track placeholder index changes and update the sort order\n  useAnimatedReaction(\n    () => [draggableActiveId.value, draggablePlaceholderIndex.value] as const,\n    (next, prev) => {\n      // Ignore initial reaction\n      if (prev === null) {\n        return;\n      }\n      const [, prevPlaceholderIndex] = prev;\n      const [nextActiveId, nextPlaceholderIndex] = next;\n      const { value: prevOrder } = draggableSortOrder;\n      // if (nextPlaceholderIndex !== prevPlaceholderIndex) {\n      //   console.log(`Placeholder index changed from ${prevPlaceholderIndex} to ${nextPlaceholderIndex}`);\n      // }\n      if (prevPlaceholderIndex !== -1 && nextPlaceholderIndex === -1) {\n        // Notify the parent component of the order change\n        if (nextActiveId === null && onOrderChange) {\n          if (!arraysEqual(prevOrder, draggableLastOrder.value)) {\n            runOnJS(onOrderChange)(prevOrder);\n          }\n          draggableLastOrder.value = prevOrder;\n        }\n      }\n      // Only update the sort order when the placeholder index changes between two valid values\n      if (prevPlaceholderIndex === -1 || nextPlaceholderIndex === -1) {\n        return;\n      }\n      // Finally update the sort order\n      const nextOrder = moveArrayIndex(prevOrder, prevPlaceholderIndex, nextPlaceholderIndex);\n      // Notify the parent component of the order update\n      if (onOrderUpdate) {\n        runOnJS(onOrderUpdate)(nextOrder, prevOrder);\n      }\n\n      draggableSortOrder.value = nextOrder;\n    },\n    [onOrderChange, draggableSortOrder, draggableLastOrder, draggableActiveId, draggablePlaceholderIndex],\n  );\n\n  return { draggablePlaceholderIndex, draggableSortOrder };\n};\n"]}