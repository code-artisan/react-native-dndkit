{"version":3,"file":"useDraggableGrid.js","sourceRoot":"","sources":["../../../../src/features/sort/hooks/useDraggableGrid.ts"],"names":[],"mappings":"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","sourcesContent":["import { type FlexStyle } from \"react-native\";\nimport { useAnimatedReaction } from \"react-native-reanimated\";\nimport { swapByItemCenterPoint } from \"../../../utils\";\nimport { useDndContext } from \"./../../../DndContext\";\nimport { useDraggableSort, type UseDraggableSortOptions } from \"./useDraggableSort\";\n\nexport type UseDraggableGridOptions = Pick<\n  UseDraggableSortOptions,\n  \"initialOrder\" | \"onOrderChange\" | \"onOrderUpdate\" | \"shouldSwapWorklet\"\n> & {\n  gap?: number;\n  size: number;\n  direction: FlexStyle[\"flexDirection\"];\n};\n\nexport const useDraggableGrid = ({\n  initialOrder,\n  onOrderChange,\n  onOrderUpdate,\n  gap = 0,\n  size,\n  direction = \"row\",\n  shouldSwapWorklet = swapByItemCenterPoint,\n}: UseDraggableGridOptions) => {\n  const { draggableActiveId, draggableOffsets, draggableRestingOffsets, draggableLayouts } = useDndContext();\n  const horizontal = [\"row\", \"row-reverse\"].includes(direction);\n\n  const { draggablePlaceholderIndex, draggableSortOrder } = useDraggableSort({\n    horizontal,\n    initialOrder,\n    onOrderChange,\n    onOrderUpdate,\n    shouldSwapWorklet,\n  });\n\n  // Track sort order changes and update the offsets\n  useAnimatedReaction(\n    () => draggableSortOrder.value,\n    (nextOrder, prevOrder) => {\n      // Ignore initial reaction\n      if (prevOrder === null) {\n        return;\n      }\n      const { value: activeId } = draggableActiveId;\n      const { value: layouts } = draggableLayouts;\n      const { value: offsets } = draggableOffsets;\n      const { value: restingOffsets } = draggableRestingOffsets;\n      if (!activeId) {\n        return;\n      }\n\n      const activeLayout = layouts[activeId].value;\n      const { width, height } = activeLayout;\n      const restingOffset = restingOffsets[activeId];\n      // const prevOffset = applyOffset(activeLayout, { x: restingOffset.x.value, y: restingOffset.y.value });\n\n      for (let nextIndex = 0; nextIndex < nextOrder.length; nextIndex++) {\n        const itemId = nextOrder[nextIndex];\n        const prevIndex = prevOrder.findIndex((id) => id === itemId);\n        // Skip items that haven't changed position\n        if (nextIndex === prevIndex) {\n          continue;\n        }\n\n        const prevRow = Math.floor(prevIndex / size);\n        const prevCol = prevIndex % size;\n        const nextRow = Math.floor(nextIndex / size);\n        const nextCol = nextIndex % size;\n        const moveCol = nextCol - prevCol;\n        const moveRow = nextRow - prevRow;\n\n        const offset = itemId === activeId ? restingOffset : offsets[itemId];\n\n        switch (direction) {\n          case \"row\":\n            offset.x.value += moveCol * (width + gap);\n            offset.y.value += moveRow * (height + gap);\n            break;\n          case \"row-reverse\":\n            offset.x.value += -1 * moveCol * (width + gap);\n            offset.y.value += moveRow * (height + gap);\n            break;\n          case \"column\":\n            offset.y.value += moveCol * (width + gap);\n            offset.x.value += moveRow * (height + gap);\n            break;\n          case \"column-reverse\":\n            offset.y.value += -1 * moveCol * (width + gap);\n            offset.x.value += moveRow * (height + gap);\n            break;\n          default:\n            break;\n        }\n      }\n    },\n    [direction, gap, size],\n  );\n\n  return { draggablePlaceholderIndex, draggableSortOrder };\n};\n"]}