{"version":3,"file":"geometry.js","sourceRoot":"","sources":["../../src/utils/geometry.ts"],"names":[],"mappings":"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","sourcesContent":["export type Point<T = number> = {\n  x: T;\n  y: T;\n};\n\nexport type Offset = {\n  x: number;\n  y: number;\n};\n\nexport type Rectangle = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\n/**\n * @summary Split a `Rectangle` in two\n * @worklet\n */\nexport const splitLayout = (layout: Rectangle, axis: \"x\" | \"y\") => {\n  \"worklet\";\n  const { x, y, width, height } = layout;\n  if (axis === \"x\") {\n    return [\n      { x, y, width: width / 2, height },\n      { x: x + width / 2, y, width: width / 2, height },\n    ];\n  }\n  return [\n    { x, y, width, height: height / 2 },\n    { x, y: y + height / 2, width, height: height / 2 },\n  ];\n};\n\n/**\n * @summary Checks if a `Point` is included inside a `Rectangle`\n * @worklet\n */\nexport const includesPoint = (layout: Rectangle, { x, y }: Point, strict?: boolean) => {\n  \"worklet\";\n  if (strict) {\n    return layout.x < x && x < layout.x + layout.width && layout.y < y && y < layout.y + layout.height;\n  }\n  return layout.x <= x && x <= layout.x + layout.width && layout.y <= y && y <= layout.y + layout.height;\n};\n\n/**\n * @summary Checks if a `Rectangle` overlaps with another `Rectangle`\n * @worklet\n */\nexport const overlapsRectangle = (layout: Rectangle, other: Rectangle) => {\n  \"worklet\";\n  return (\n    layout.x < other.x + other.width &&\n    layout.x + layout.width > other.x &&\n    layout.y < other.y + other.height &&\n    layout.y + layout.height > other.y\n  );\n};\n\n/**\n * @summary Checks if a `Rectange` overlaps with another `Rectangle` with a margin\n * @worklet\n */\nexport const overlapsRectangleBy = (layout: Rectangle, other: Rectangle, by: number) => {\n  \"worklet\";\n  return (\n    layout.x < other.x + other.width - by &&\n    layout.x + layout.width > other.x + by &&\n    layout.y < other.y + other.height - by &&\n    layout.y + layout.height > other.y + by\n  );\n};\n\n/**\n * @summary Apply an offset to a layout\n * @worklet\n */\nexport const applyOffset = (layout: Rectangle, { x, y }: Offset): Rectangle => {\n  \"worklet\";\n  return {\n    width: layout.width,\n    height: layout.height,\n    x: layout.x + x,\n    y: layout.y + y,\n  };\n};\n\n/**\n * @summary Compute a center point\n * @worklet\n */\nexport const centerPoint = (layout: Rectangle): Point => {\n  \"worklet\";\n  return {\n    x: layout.x + layout.width / 2,\n    y: layout.y + layout.height / 2,\n  };\n};\n\n/**\n * @summary Compute a center axis\n * @worklet\n */\nexport const centerAxis = (layout: Rectangle, horizontal: boolean): number => {\n  \"worklet\";\n  return horizontal ? layout.x + layout.width / 2 : layout.y + layout.height / 2;\n};\n\n/**\n * @summary Checks if a `Rectangle` overlaps with an axis\n * @worklet\n */\nexport const overlapsAxis = (layout: Rectangle, axis: number, horizontal: boolean) => {\n  \"worklet\";\n  return horizontal\n    ? layout.x < axis && layout.x + layout.width > axis\n    : layout.y < axis && layout.y + layout.height > axis;\n};\n\nexport const getDistance = (x: number, y: number): number => {\n  \"worklet\";\n  return Math.sqrt(Math.abs(x) ** 2 + Math.abs(y) ** 2);\n};\n"]}